y.cub <- y.sc^3
x2.y <- x.sq * y.sc
x.y2 <- x.sc * y.sq
geographic <- cbind(x.sc, y.sc, x.sq, x.y, y.sq, x.cub, y.cub, x2.y, x.y2)
# now we scale those geographic trends again
geog.sc <- as.data.frame(apply(geographic, 2, standard))
# recombine dataset, with the scaled original data, the scaled geographic data, and the
# original binary variables
all.data <- cbind(scaled.in.data.short, geog.sc, in.data.sub[,44:48])
head(all.data)
# write up a function to use to remove correlated data
rem.cors <- function(frame) {
# find the number of columns and rows in the dataframe
b <- ncol(frame)
n <- nrow(frame)
# create an empty dataframe
keep1 <- array(0, dim = c(1, b))
# remove columns that are either all zeros or all the same value
for (h in 1:b) {
ifelse(sum(frame[,h]) != 0, keep1[,h] <- h, keep1[,h] <- 0)
ifelse(sum(duplicated(frame[,h])) != n - 1 ,keep1[,h] <- h, keep1[,h] <- 0)
}
# only keep the columns that have values
g <- as.numeric(keep1[keep1 > 0])
new <- frame[,g]
# find the number of columns left after removing no data values
c <- ncol(new)
# create a correlation matrix (will be c x c dimensions)
cor.mat <- cor(new, method = "pearson", use = "na.or.complete")
# make an empty matrix filled with zeros
keep <- array(0, dim = c(1,c))
# make an empty matrix filled with ones
m <- matrix(1, nrow = n, ncol = c)
# now we need to reorder the columns so that they are in the order of most correlated
cor.mat.ord <- cor.mat[,order(-abs(cor.mat[1,]))]
cor.mat.ord <- cor.mat.ord[order(-abs(cor.mat[,1])),]
# loop through the data and remove the data that is too correlated to one another
for (i in 2:c) {
if (i == 2) {
m[,i] <- m[,i]
}
if (i > 2) {
red.mat <- m[,1:(i-1)]
cor.index <- which(red.mat[1,] == 1)
var.cors <- as.numeric(abs(cor.mat.ord[i, cor.index[2:length(cor.index)]]))
ifelse(any(var.cors > R), m[,i] <- 0, m[,i] <- m[,i])
}
}
# save the column names of the variables that we kept
name.index <- which(m[1,] == 1)
cor.names <- colnames(cor.mat.ord)
final.names <- cor.names[name.index]
# pull out the original data from the above variables
og.index <- match(final.names, colnames(new))
out <- new[,og.index]
return(data.frame(out))
}
# set the R2 cutoff point for the above function
# try changing this to make sure we are avoiding multicollinearity
R <- 0.5
# remove multicollinear data
reduced.all.data <- rem.cors(all.data)
# check the data
dim(reduced.all.data)
colnames(reduced.all.data)
# run an OLS with the above predictors
npp.model <- lm(npp ~ .,
data = reduced.all.data)
summary(npp.model)
# run a backwards stepwise regression to reduce predictors
aic.model <- stepAIC(npp.model, k = 2, trace = F)
summary(aic.model)
# remove the non-significant predictors p > 0.001
npp.pred.names <- names(which(summary(aic.model)$coefficients[,4][2:length(summary(aic.model)$coefficients)] < 0.001))
# find the index of these predictors
pred.index <- which(colnames(reduced.all.data) %in% npp.pred.names)
# use the index to pull out the final data
final.pred <- reduced.all.data[,c(1,pred.index)]
# run the final regression
model.final <- lm(npp ~ .,
data = final.pred)
summary(model.final)
# once all the files are ran we can combine them into one file
tall <- read.csv(paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/reflectance_extract/tall/tall2018_reflectance.csv"))
serc <- read.csv(paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/reflectance_extract/serc/serc2017_reflectance.csv"))
harv <- read.csv(paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/reflectance_extract/harv/harv2018_reflectance.csv"))
mlbs <- read.csv(paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/reflectance_extract/mlbs/mlbs2018_reflectance.csv"))
ornl <- read.csv(paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/reflectance_extract/ornl/ornl2018_reflectance.csv"))
# make sure that the colnames match
colnames(serc) <- colnames(tall)
colnames(mlbs) <- colnames(tall)
colnames(harv) <- colnames(tall)
colnames(ornl) <- colnames(tall)
# combine the data
all.data <- rbind(tall,serc,mlbs,harv,ornl)
# write this file to disc
write.csv(all.data,
paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/reflectance_extract/all_sites_reflectance.csv"),
row.names = FALSE)
# read in the data
site.refl <- read.csv(paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/reflectance_extract/all_sites_reflectance.csv"))
# remove the ID column
site.refl <- site.refl[,2:320]
# read in the data
site.refl <- read.csv(paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/reflectance_extract/all_sites_reflectance.csv"))
# remove the ID column
site.refl <- site.refl[,2:320]
# lets take a look at the original data vs the transformed data
matplot(t(site.refl[15,]),
type = "l",
xlab = "Wavelength (nm)",
ylab = "Reflectance",
main = "All SItes: HSI spectra")
# lets run a pca on the training data
train.pca <- prcomp(site.refl,
center = TRUE,
scale = FALSE)
# how well did this do
summary(train.pca)
# save the pc loadings
pc1 <- train.pca$rotation[,1]
pc2 <- train.pca$rotation[,2]
# write these to disc
write.csv(pc1,
paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/pca_loadings/pc1_loadings.csv"))
write.csv(pc2,
paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/pca_loadings/pc2_loadings.csv"))
library(hypRspec)
library(raster)
library(hypRspec)
library(raster)
# list the files
hsi.files <- list.files("D:/corrected_hsi_hdf5_files/mlbs2018",
full.names = TRUE)
i <- 1
strsplit(hsi.files[i], "_")
library(hypRspec)
library(raster)
# list the files
hsi.files <- list.files("D:/corrected_hsi_hdf5_files/mlbs2018",
full.names = TRUE)
# loop through the files
for (i in 1:length(hsi.files)) {
# pull out the file name
f.name <- strsplit(hsi.files[i], "_")[[1]][6]
# apply the coefficient for pc1
pc1.rst <- hsi.coef(hsi.files[i],
metadata.path = "/MLBS/Reflectance/Reflectance_Data",
coordinate.path = "/MLBS/Reflectance/Metadata/Coordinate_System",
wavelength.path = "/MLBS/Reflectance/Metadata/Spectral_Data/Wavelength",
reflectance.path = "/MLBS/Reflectance/Reflectance_Data",
coef.csv = paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/pca_loadings/pc1_loadings.csv"),
inter = FALSE,
scale.data = TRUE)
# write this file to disc and then delete it
writeRaster(pc1.rst,
paste0("D:/pca_rasters/mlbs2018/pc1/pc1_", f.name, ".tif"),
format="GTiff",
overwrite = TRUE)
# memory management
gc()
rm(pc1.rst)
gc()
# apply the coefficient for pc2
pc2.rst <- hsi.coef(hsi.files[i],
metadata.path = "/MLBS/Reflectance/Reflectance_Data",
coordinate.path = "/MLBS/Reflectance/Metadata/Coordinate_System",
wavelength.path = "/MLBS/Reflectance/Metadata/Spectral_Data/Wavelength",
reflectance.path = "/MLBS/Reflectance/Reflectance_Data",
coef.csv = paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/pca_loadings/pc2_loadings.csv"),
inter = FALSE,
scale.data = TRUE)
# write this file to disc and then delete it
writeRaster(pc2.rst,
paste0("D:/pca_rasters/mlbs2018/pc2/pc2_", f.name, ".tif"),
format="GTiff",
overwrite = TRUE)
# memory management
gc()
rm(pc2.rst)
gc()
# bookkeeping
print(f.name)
}
# list all the files
pc1.files <- list.files("D:/pca_rasters/mlbs2018/pc1",
full.names = TRUE)
# read the files in and merge them together
rst.list <- lapply(pc1.files, raster::raster)
rst.pc1 <- do.call(raster::stack, rst.list)
# write this to disc
writeRaster(rst.pc1,
"D:/pca_rasters/mlbs2018/mlbs_pc1.tif",
format="GTiff",
overwrite = TRUE)
# memory managment
gc()
rm(rst.list)
rm(rst.pc1)
gc()
# list all the files
pc2.files <- list.files("D:/pca_rasters/mlbs2018/pc2",
full.names = TRUE)
# read the files in and merge them together
rst.list <- lapply(pc2.files, raster::raster)
rst.pc2 <- do.call(raster::stack, rst.list)
# write this to disc
writeRaster(rst.pc2,
"D:/pca_rasters/mlbs2018/mlbs_pc2.tif",
format="GTiff",
overwrite = TRUE)
# memory managment
gc()
rm(rst.list)
rm(rst.pc2)
gc()
# list the files
hsi.files <- list.files("D:/corrected_hsi_hdf5_files/mlbs2018",
full.names = TRUE)
i <- 1
hsi.files[i]
metadata.path = "/MLBS/Reflectance/Reflectance_Data"
coordinate.path = "/MLBS/Reflectance/Metadata/Coordinate_System"
wavelength.path = "/MLBS/Reflectance/Metadata/Spectral_Data/Wavelength"
reflectance.path = "/MLBS/Reflectance/Reflectance_Data"
coef.csv = paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/pca_loadings/pc1_loadings.csv")
"data/spectral_diversity/pca_loadings/pc1_loadings.csv"),
inter = FALSE
coef.csv = paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/pca_loadings/pc1_loadings.csv")
scale.data = TRUE
band.combo = c(25:194, 215:284, 325:403)
# lets look at the reflectance metadata
refl.info <- h5readAttributes(hy.file, metadata.path)
hy.file = hsi.files[i]
# lets look at the reflectance metadata
refl.info <- h5readAttributes(hy.file, metadata.path)
h5closeAll()
# lets look at the reflectance metadata
refl.info <- h5readAttributes(hy.file, metadata.path)
# lets read in the wavelength info
wavelengths <- h5read(file = hy.file,
name = wavelength.path)
# lets save the dimensions of the dataset for future use
n.rows <- refl.info$Dimensions[1]
n.cols <- refl.info$Dimensions[2]
n.bands <- refl.info$Dimensions[3]
# lets save the scale factor and the data ignore value
scale.fact.val <- refl.info$Scale_Factor
data.ignore.val <- refl.info$Data_Ignore_Value
# read in the coordinate infomation
map.info <- h5read(file = hy.file,
name = coordinate.path)
# save the crs projection data
crs.proj <- base::paste0("+init=epsg:", map.info$`EPSG Code`)
# pull out the map extent info
map.info <- strsplit(map.info$Map_Info, split = ",", fixed = TRUE)
x.min <- as.numeric(map.info[[1]][4])
y.max <- as.numeric(map.info[[1]][5])
# read in the PLSR coefficient data
plsr.coef <- read.csv(coef.csv)
head(plsr.coef)
q <- 25
# lets read in the band and clean it up like we need before
refl.array <- h5read(file = hy.file,
name = reflectance.path,
index = list(q, 1:n.cols, 1:n.rows))
refl.matrix <- refl.array[1,,]
refl.matrix[refl.matrix == data.ignore.val] <- NA
refl.matrix <- refl.matrix / scale.fact.val
s
# set the matrix stack index
s <- 1
plsr.coef[s,2]
plsr.coef[s,1]
print(paste0("applying coefficient to ", plsr.coef[s,1])
# apply the coefficient
if (scale.data == TRUE) {
plsr.matrix <- raster::scale(refl.matrix, center = TRUE, scale = FALSE) * wl.coef
}
if (scale.data == FALSE) {
plsr.matrix <- refl.matrix * wl.coef
}
if (s == 1){
# stack this raster
hsi.matrix <- plsr.matrix
hsi.matrix <- hsi.matrix + plsr.inter
} else {
hsi.matrix <- hsi.matrix + plsr.matrix
}
s <- s + 1
}
#---------------------------------------------------------------------------------------------------
# lets make a raster
#---------------------------------------------------------------------------------------------------
print(paste0("transforming flightline to a raster."))
# convert the matrix to a raster
refl.raster <- raster(hsi.matrix, crs = crs.proj)
# we need to transpose the raster
refl.raster <- raster::t(refl.raster)
# find the dimensions of our raster
y.dim <- dim(refl.raster)[1]
x.dim <- dim(refl.raster)[2]
# set the x.max and y.min
x.max <- x.min + x.dim
y.min <- y.max - y.dim
# create an extent object
raster.ext <- extent(x.min, x.max, y.min, y.max)
# set the spatial extent of the raster
extent(refl.raster) <- raster.ext
return(refl.raster)
}
if (inter == FALSE) {
# read in the PLSR coefficient data
plsr.coef <- read.csv(coef.csv)
# remove the NM in front of the wavelengths and then round to 4 digits
plsr.coef$X <- as.numeric(substring(plsr.coef$X, 3))
# lets make sure that all the samples are accounted for
plsr.index <- which(wavelengths %in% plsr.coef$X)
# set the matrix stack index
s <- 1
# first lets calculate the coefficients we will apply to all the images
# if we are processing the entire image then we will remove the noisy bands
# we can run this instead: c(25:194, 215:284, 325:403)
# for just processing rbg images we can use: c(53,35,19)
for (q in plsr.index) {
# lets read in the band and clean it up like we need before
refl.array <- h5read(file = hy.file,
name = reflectance.path,
index = list(q, 1:n.cols, 1:n.rows))
refl.matrix <- refl.array[1,,]
refl.matrix[refl.matrix == data.ignore.val] <- NA
refl.matrix <- refl.matrix / scale.fact.val
# apply the appropriate coefficient
# find the PLSR coeffecient associated with the band
rst.wl <- wavelengths[q]
# find the coef
wl.coef <- plsr.coef[plsr.coef$X == rst.wl,][,2]
print(paste0("applying coefficient to ", plsr.coef[plsr.coef$X == rst.wl,][,1] ,"nm."))
# apply the coefficient
if (scale.data == TRUE) {
plsr.matrix <- raster::scale(refl.matrix, center = TRUE, scale = FALSE) * wl.coef
}
if (scale.data == FALSE) {
plsr.matrix <- refl.matrix * wl.coef
}
if (s == 1){
# stack this raster
hsi.matrix <- plsr.matrix
} else {
hsi.matrix <- hsi.matrix + plsr.matrix
}
s <- s + 1
}
#---------------------------------------------------------------------------------------------------
# lets make a raster
#---------------------------------------------------------------------------------------------------
print(paste0("transforming flightline to a raster."))
# convert the matrix to a raster
refl.raster <- raster(hsi.matrix, crs = crs.proj)
# we need to transpose the raster
refl.raster <- raster::t(refl.raster)
# find the dimensions of our raster
y.dim <- dim(refl.raster)[1]
x.dim <- dim(refl.raster)[2]
# set the x.max and y.min
x.max <- x.min + x.dim
y.min <- y.max - y.dim
# create an extent object
raster.ext <- extent(x.min, x.max, y.min, y.max)
# set the spatial extent of the raster
extent(refl.raster) <- raster.ext
return(refl.raster)
}
library(devtools)
setwd("C:/Users/Aaron Kamoske/Dropbox/R_Packages_GitHub/hypRspec")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(devtools)
install_github("akamoske/hypRspec")
library(hypRspec)
library(raster)
# list the files
hsi.files <- list.files("D:/corrected_hsi_hdf5_files/mlbs2018",
full.names = TRUE)
# loop through the files
for (i in 1:length(hsi.files)) {
# pull out the file name
f.name <- strsplit(hsi.files[i], "_")[[1]][6]
# apply the coefficient for pc1
pc1.rst <- hsi.coef(hy.file = hsi.files[i],
metadata.path = "/MLBS/Reflectance/Reflectance_Data",
coordinate.path = "/MLBS/Reflectance/Metadata/Coordinate_System",
wavelength.path = "/MLBS/Reflectance/Metadata/Spectral_Data/Wavelength",
reflectance.path = "/MLBS/Reflectance/Reflectance_Data",
coef.csv = paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/pca_loadings/pc1_loadings.csv"),
inter = FALSE,
scale.data = TRUE,
band.combo = c(25:194, 215:284, 325:403))
# write this file to disc and then delete it
writeRaster(pc1.rst,
paste0("D:/pca_rasters/mlbs2018/pc1/pc1_", f.name, ".tif"),
format="GTiff",
overwrite = TRUE)
# memory management
gc()
rm(pc1.rst)
gc()
# apply the coefficient for pc2
pc2.rst <- hsi.coef(hsi.files[i],
metadata.path = "/MLBS/Reflectance/Reflectance_Data",
coordinate.path = "/MLBS/Reflectance/Metadata/Coordinate_System",
wavelength.path = "/MLBS/Reflectance/Metadata/Spectral_Data/Wavelength",
reflectance.path = "/MLBS/Reflectance/Reflectance_Data",
coef.csv = paste0("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissteration_Ch3/",
"data/spectral_diversity/pca_loadings/pc2_loadings.csv"),
inter = FALSE,
scale.data = TRUE,
band.combo = c(25:194, 215:284, 325:403))
# write this file to disc and then delete it
writeRaster(pc2.rst,
paste0("D:/pca_rasters/mlbs2018/pc2/pc2_", f.name, ".tif"),
format="GTiff",
overwrite = TRUE)
# memory management
gc()
rm(pc2.rst)
gc()
# bookkeeping
print(f.name)
}
# list all the files
pc1.files <- list.files("D:/pca_rasters/mlbs2018/pc1",
full.names = TRUE)
# read the files in and merge them together
rst.list <- lapply(pc1.files, raster::raster)
rst.pc1 <- do.call(raster::stack, rst.list)
# write this to disc
writeRaster(rst.pc1,
"D:/pca_rasters/mlbs2018/mlbs_pc1.tif",
format="GTiff",
overwrite = TRUE)
# memory managment
gc()
rm(rst.list)
rm(rst.pc1)
gc()
# list all the files
pc2.files <- list.files("D:/pca_rasters/mlbs2018/pc2",
full.names = TRUE)
# read the files in and merge them together
rst.list <- lapply(pc2.files, raster::raster)
rst.pc2 <- do.call(raster::stack, rst.list)
# write this to disc
writeRaster(rst.pc2,
"D:/pca_rasters/mlbs2018/mlbs_pc2.tif",
format="GTiff",
overwrite = TRUE)
# memory managment
gc()
rm(rst.list)
rm(rst.pc2)
gc()
rst.pc1 <- do.call(raster::mosaic, rst.list, fun = "mean")
# list all the files
pc1.files <- list.files("D:/pca_rasters/mlbs2018/pc1",
full.names = TRUE)
# read the files in and merge them together
rst.list <- lapply(pc1.files, raster::raster)
rst.pc1 <- do.call(raster::mosaic, c(rst.list, fun = mean))
# write this to disc
writeRaster(rst.pc1,
"D:/pca_rasters/mlbs2018/mlbs_pc1.tif",
format="GTiff",
overwrite = TRUE)
# memory managment
gc()
rm(rst.list)
rm(rst.pc1)
gc()
# list all the files
pc2.files <- list.files("D:/pca_rasters/mlbs2018/pc2",
full.names = TRUE)
# read the files in and merge them together
rst.list <- lapply(pc2.files, raster::raster)
rst.pc2 <- do.call(raster::mosaic, c(rst.list, fun = mean))
# write this to disc
writeRaster(rst.pc2,
"D:/pca_rasters/mlbs2018/mlbs_pc2.tif",
format="GTiff",
overwrite = TRUE)
# memory managment
gc()
rm(rst.list)
rm(rst.pc2)
gc()
