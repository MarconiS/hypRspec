band.combo = c(25:194, 215:284, 325:403),
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength",
coordinate.path = "/TALL/Reflectance/Metadata/Coordinate_System",
shp.file.loc = "D:/Kamoske_Dissertation_Ch2/PCA_Noise/Shp_File",
shp.file.name = "TALL_Random")
# convert the output to a dataframe and remove the NA values
hsi.df <- as.data.frame(na.omit(hsi.refl))
# Set the file name
f.name <- strsplit(hsi.files[i], "_")[[1]][9]
# write this to disc
write.table(hsi.df, paste0("D:/Kamoske_Dissertation_Ch2/PCA_Noise/HSI_FL/TALL_", f.name, "_Extract.csv"),
sep=',', row.names = FALSE, col.names = FALSE)
}
# make a list of the files
hsi.files <- list.files("D:/NEON_Data/2018/D08/2018_TALL_4/L1/Spectrometer/ReflectanceH5/2018042918", full.names = TRUE)
# loop through the files
for (i in 1:length(hsi.files)) {
print(paste0("Second day of flights: ", hsi.files[i], "."))
# Calculate the NDVI mask
ndvi <- ndvi.mask(hy.file = hsi.files[i],
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength",
red.nm = 674,
nir.nm = 830,
ndvi.threshold = 0.5)
# Calculate the brightness mask
brightness <- brightness.mask(hy.file = hsi.files[i],
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength")
# Apply the corrections and extract the reflectance data
hsi.refl <- hsi.pt.extract(hy.file = hsi.files[i],
band.combo = c(25:194, 215:284, 325:403),
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength",
coordinate.path = "/TALL/Reflectance/Metadata/Coordinate_System",
shp.file.loc = "D:/Kamoske_Dissertation_Ch2/PCA_Noise/Shp_File",
shp.file.name = "TALL_Random")
# convert the output to a dataframe and remove the NA values
hsi.df <- as.data.frame(na.omit(hsi.refl))
# Set the file name
f.name <- strsplit(hsi.files[i], "_")[[1]][9]
# write this to disc
write.table(hsi.df, paste0("D:/Kamoske_Dissertation_Ch2/PCA_Noise/HSI_FL/TALL_", f.name, "_Extract.csv"),
sep=',', row.names = FALSE, col.names = FALSE)
}
#--------------------------------------------------------------------------------------------------------------
# Third day of flights
#--------------------------------------------------------------------------------------------------------------
# make a list of the files
hsi.files <- list.files("D:/NEON_Data/2018/D08/2018_TALL_4/L1/Spectrometer/ReflectanceH5/2018043020", full.names = TRUE)
# loop through the files
for (i in 1:length(hsi.files)) {
print(paste0("Third day of flights: ", hsi.files[i], "."))
# Calculate the NDVI mask
ndvi <- ndvi.mask(hy.file = hsi.files[i],
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength",
red.nm = 674,
nir.nm = 830,
ndvi.threshold = 0.5)
# Calculate the brightness mask
brightness <- brightness.mask(hy.file = hsi.files[i],
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength")
# Apply the corrections and extract the reflectance data
hsi.refl <- hsi.pt.extract(hy.file = hsi.files[i],
band.combo = c(25:194, 215:284, 325:403),
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength",
coordinate.path = "/TALL/Reflectance/Metadata/Coordinate_System",
shp.file.loc = "D:/Kamoske_Dissertation_Ch2/PCA_Noise/Shp_File",
shp.file.name = "TALL_Random")
# convert the output to a dataframe and remove the NA values
hsi.df <- as.data.frame(na.omit(hsi.refl))
# Set the file name
f.name <- strsplit(hsi.files[i], "_")[[1]][9]
# write this to disc
write.table(hsi.df, paste0("D:/Kamoske_Dissertation_Ch2/PCA_Noise/HSI_FL/TALL_", f.name, "_Extract.csv"),
sep=',', row.names = FALSE, col.names = FALSE)
}
hsi.pts <- list.files("D:/Kamoske_Dissertation_Ch2/PCA_Noise/HSI_FL", full.names = TRUE)
hsi.pts
# read in the csv's
hsi.ex <- do.call("rbind", sapply(hsi.pts, read.csv, simplify = FALSE))
# take a look
head(hsi.ex)
# read in the csv's
hsi.ex <- sapply(hsi.pts, read.csv, simplify = FALSE)
hsi.ex
hsi.ex <- do.call(rbind, hsi.ex)
# take a look
head(hsi.ex)
colnames(hsi.ex
)
# read in the csv's
hsi.ex <- sapply(hsi.pts, read.csv)
hsi.ex <- do.call(rbind, hsi.ex)
# take a look
head(hsi.ex)
# read in the csv's
test <- read.csv(hsi.pts[1])
head(test)
# list the files
hsi.pts <- list.files("D:/Kamoske_Dissertation_Ch2/PCA_Noise/HSI_FL", full.names = TRUE)
# read in the csv's
hsi.list <- list()
for (i in 1:length(hsi.pts)) {
hsi.csv <- read.csv(hsi.pts[i])
hsi.list[[i]] <- hsi.csv
}
# bind all the csv's together
hsi.df <- do.call(rbind, hsi.list)
# take a look at the final product
head(hsi.df)
dim(hsi.df)
nrow(hsi.df)
# remove the NA values
hsi.df <- na.omit(hsi.df)
# take a look at the final product
head(hsi.df)
nrow(hsi.df)
colnames(hsi.df)
# just the reflectance data
ref.data <- hsi.df[,3:321]
colnames(ref.data)
#lets run a pca
n.pca <- princomp(ref.data, cor = TRUE, scores = TRUE)
n.pca
#lets look at the results
comp.imp <- summary(n.pca)
comp.imp
#lets look at the loadings
pca.load <- loadings(n.pca, digits = 2)
pca.load
#lets plot the number of prinical components
plot(n.pca, type = "l")
write.csv(pca.load, "D:/Kamoske_Dissertation_Ch2/PCA_Noise/pca_loadings_20190904.csv" )
nrow(hsi.df)
comp.imp
#lets save all our values
pca.scores <- n.pca$scores
n.pca
?princomp
n.pca[1:5]
?predict
pca.scores
# try to predict this across the data
pca.n <- as.data.frame(predict(pca.scores[,1:5],tn.data),
stringsAsFactors = FALSE)
# try to predict this across the data
pca.n <- as.data.frame(predict(n.pca,tn.data),
stringsAsFactors = FALSE)
# try to predict this across the data
pca.n <- as.data.frame(predict(n.pca,hsi.df),
stringsAsFactors = FALSE)
n.pca$x
n.pca[,1:3]
n.pca
pca.load
# try to predict this across the data
pca.n <- as.data.frame(predict(pca.load, hsi.df),
stringsAsFactors = FALSE)
n.pca
class(n.pca)
class(pca.scores)
#lets save all our values
pca.scores <- n.pca$scores[,1:3]
pca.scores
# try to predict this across the data
pca.n <- as.data.frame(predict(pca.scores, hsi.df),
stringsAsFactors = FALSE)
#lets save all our values
pca.scores <- n.pca$scores[,1:3]
# try to predict this across the data
test <- as.data.frame(hsi.df %*% pca.scores,
stringsAsFactors = FALSE)
pca.scores
hsi.df
# try to predict this across the data
test <- as.data.frame(hsi.df %*% pca.scores)
class(pca.scores)
class(hsi.df)
# try to predict this across the data
hsi.mat <- matrix(hsi.df)
test <- as.data.frame(hsi.mat %*% pca.scores)
class(hsi.mat)
test <- as.data.frame(t(hsi.df) %*% pca.scores)
t(hsi.df)
dim(t(hsi.df))
head(Test)
head(test)
# try to predict this across the data
test <- as.data.frame(t(ref.data) %*% pca.scores)
head(test)
# try to predict this across the data
test <- as.data.frame(pca.scores %*% t(ref.data))
# try to predict this across the data
test <- as.data.frame(pca.scores %*% ref.data)
# try to predict this across the data
test <- as.data.frame(T(pca.scores) %*% ref.data)
# try to predict this across the data
test <- as.data.frame(t(pca.scores) %*% ref.data)
# try to predict this across the data
test <- as.data.frame(t(pca.scores) %*% matrix(ref.data))
# try to predict this across the data
test <- as.data.frame(pca.scores %*% matrix(ref.data))
# try to predict this across the data
pca.n <- as.data.frame(predict(n.pca, hsi.df),
stringsAsFactors = FALSE)
pca.n
# try to predict this across the data
test <- as.data.frame(t(ref.data) %*% pca.scores)
test
ref.data
# try to predict this across the data
test <- as.data.frame(pca.scores %*% t(ref.data) )
# try to predict this across the data
test <- as.data.frame(pca.scores %*% matrix(ref.data) )
class(pca.scores)
class(ref.data)
class(matrix(ref.data))
pca.n <- as.data.frame(predict(n.pca, hsi.df),
stringsAsFactors = FALSE)
pca.n
pca.n <- as.data.frame(predict(hsi.df,n.pca),
stringsAsFactors = FALSE)
pca.scores
pca.n <- as.data.frame(predict(n.pca, hsi.df),
stringsAsFactors = FALSE)[,1:3]
pca.n
pca.n[1,]
pca.scores[1,]
pca.n[111,]
pca.scores[111,]
# read in the HSI data
refl.array <- h5read(file = hy.file,
name = reflectance.path,
index = list(, 1:n.cols, 1:n.rows))
hsi.files[i]
# make a list of the files
hsi.files <- list.files("D:/NEON_Data/2018/D08/2018_TALL_4/L1/Spectrometer/ReflectanceH5/2018043020", full.names = TRUE)
# read in the HSI data
refl.array <- h5read(file = hsi.files[1],
name = reflectance.path,
index = list(, 1:n.cols, 1:n.rows))
reflectance.path = "/TALL/Reflectance/Reflectance_Data"
# read in the HSI data
refl.array <- h5read(file = hsi.files[1],
name = reflectance.path,
index = list(, 1:n.cols, 1:n.rows))
# read in the HSI data
refl.array <- h5read(file = hsi.files[1],
name = reflectance.path,
index = list(c(25:194, 215:284, 325:403), 1:n.cols, 1:n.rows))
h5closeAll()
# read in the HSI data
refl.array <- h5read(file = hsi.files[1],
name = reflectance.path)
hy.file = hsi.files[i]
band.combo = c(25:194, 215:284, 325:403)
metadata.path = "/TALL/Reflectance/Reflectance_Data"
reflectance.path = "/TALL/Reflectance/Reflectance_Data"
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength"
coordinate.path = "/TALL/Reflectance/Metadata/Coordinate_System"
shp.file.loc = "D:/Kamoske_Dissertation_Ch2/PCA_Noise/Shp_File"
shp.file.name = "TALL_Random"
# lets look at the reflectance metadata
refl.info <- h5readAttributes(hy.file, metadata.path)
hsi.files[i]
i <- 1
# lets look at the reflectance metadata
refl.info <- h5readAttributes(hy.file, metadata.path)
hsi.files[i]
hy.file = hsi.files[i]
# lets look at the reflectance metadata
refl.info <- h5readAttributes(hy.file, metadata.path)
# lets read in the wavelength info
wavelengths <- h5read(file = hy.file,
name = wavelength.path)
# lets save the dimensions of the dataset for future use
n.rows <- refl.info$Dimensions[1]
n.cols <- refl.info$Dimensions[2]
n.bands <- refl.info$Dimensions[3]
# lets save the scale factor and the data ignore value
scale.fact.val <- refl.info$Scale_Factor
data.ignore.val <- refl.info$Data_Ignore_Value
# lets prevent R from writing the numbers in scientific format
options(scipen = 999)
# lets read in the shapefile
toc.refl <- readOGR(shp.file.loc,
shp.file.name)
# we need to make an empty matrix to store all the reflectance data in
ext.mat <- matrix(ncol = length(band.combo) + 2,
nrow = nrow(toc.refl) + 1)
# read in the coordinate infomation
map.info <- h5read(file = hy.file,
name = coordinate.path)
# save the crs projection data
crs.proj <- base::paste0("+init=epsg:", map.info$`EPSG Code`)
# pull out the map extent info
map.info <- strsplit(map.info$Map_Info, split = ",", fixed = TRUE)
x.min <- as.numeric(map.info[[1]][4])
y.max <- as.numeric(map.info[[1]][5])
q <- 25
print(paste0("applying topographic correction to band ", q, "."))
# lets read in the band and clean it up like we need before
refl.array <- h5read(file = hy.file,
name = reflectance.path,
index = list(q, 1:n.cols, 1:n.rows))
refl.matrix <- refl.array[1,,]
refl.matrix[refl.matrix == data.ignore.val] <- NA
refl.matrix <- refl.matrix / scale.fact.val
print(paste0("extracting data from band ", q, "."))
# convert the matrix to a raster
refl.raster <- raster(refl.matrix, crs = crs.proj)
# we need to transpose the raster
refl.raster <- raster::t(refl.raster)
# find the dimensions of our raster
y.dim <- dim(refl.raster)[1]
x.dim <- dim(refl.raster)[2]
# set the x.max and y.min
x.max <- x.min + x.dim
y.min <- y.max - y.dim
# create an extent object
raster.ext <- extent(x.min, x.max, y.min, y.max)
# set the spatial extent of the raster
extent(refl.raster) <- raster.ext
pca.n <- predict(n.pca, refl.raster),
stringsAsFactors = FALSE)
pca.n <- predict(n.pca, refl.raster)
raster::predict()
?raster::predict
pca.n <- raster::predict(refl.raster, n.pca)
plot(refl.raster)
n.pca
pca.scores
# try to predict this across the data
test <- as.data.frame(pca.scores %*% refl.raster)
# just the reflectance data
ref.data <- hsi.df[,3:321]
#lets run a pca
n.pca <- princomp(ref.data, cor = TRUE, scores = TRUE)
#lets look at the results
comp.imp <- summary(n.pca)
#lets look at the loadings
pca.load <- loadings(n.pca, digits = 2)
#lets plot the number of prinical components
plot(n.pca, type = "l")
#lets save all our values
pca.scores <- n.pca$scores[,1:3]
plot(pca.scores)
plot(pca.scores[,1:2])
plot(pca.scores[,2:3])
plot(pca.scores[,1:3])
plot(pca.scores[,1])
plot(pca.scores[,1], ref.data)
plot(pca.scores[,1], ref.data$nm501.622406)
library(devtools)
setwd("C:/Users/Aaron Kamoske/Dropbox/R_Packages_GitHub/hypRspec")
devtools::document()
library(raster)
library(MASS)
# read in canopy rasters
top.n <- raster("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissertation_Ch2/data/RASTERS/HSI/TALL_TOC_N.tif")
plot(top.n)
shp.file.loc = "D:/Kamoske_Dissertation_Ch2/PCA_Noise/Shp_File"
shp.file.name = "TALL_Box"
# lets read in the shapefile
toc.refl <- readOGR(shp.file.loc,
shp.file.name)
plot(toc.refl, add = TRUE)
plot(toc.refl)
plot(top.n)
shp.file.name = "TALL_PCA_Box"
# lets read in the shapefile
toc.refl <- readOGR(shp.file.loc,
shp.file.name)
# lets read in the shapefile
pca.box <- readOGR(shp.file.loc,
shp.file.name)
plot(top.n)
plot(pca.box, add = TRUE)
pca.box
crs(pca.box) <- crs(top.n)
plot(top.n)
plot(pca.box, add = TRUE)
pca.box
library(rgdal)
shp_utm <- spTransform(pca.box, crs(top.n))
plot(shp_utm)
plot(top.n)
plot(shp_utm, add = TRUE)
shp_utm
# lets read in the shapefile
pca.box <- readOGR(shp.file.loc,
shp.file.name)
proj4string(pca.box) <- CRS(proj4string(top.n))
pca.box
# lets read in the shapefile
pca.box <- readOGR(shp.file.loc,
shp.file.name)
shp.file.name = "TALL_PCA_BOX"
# lets read in the shapefile
pca.box <- readOGR(shp.file.loc,
shp.file.name)
plot(top.n)
plot(pca.box, add = TRUE)
test <- mask(top.n, pca.box)
plot(test)
test
top.n
?mask
test <- crop(top.n, pca.box)
plot(test)
test
library(devtools)
devtools::document()
install_github("akamoske/hypRspec")
# Load the library
library(hypRspec)
library(raster)
# make a list of the files
hsi.files <- list.files("D:/NEON_Data/2018/D08/2018_TALL_4/L1/Spectrometer/ReflectanceH5/2018042716", full.names = TRUE)
hsi.files
i <- 1
print(paste0("First day of flights: ", hsi.files[i], "."))
# Calculate the NDVI mask
ndvi <- ndvi.mask(hy.file = hsi.files[i],
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength",
red.nm = 674,
nir.nm = 830,
ndvi.threshold = 0.5)
# Calculate the brightness mask
brightness <- brightness.mask(hy.file = hsi.files[i],
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength")
# Apply the corrections and extract the reflectance data
hsi.refl <- hsi.clip(hy.file = hsi.files[i],
band.combo = c(25:194, 215:284, 325:403),
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength",
coordinate.path = "/TALL/Reflectance/Metadata/Coordinate_System",
shp.file.loc = "D:/Kamoske_Dissertation_Ch2/PCA_Noise/Shp_File",
shp.file.name = "TALL_PCA_BOX")
hsi.refl
plot(hsi.refl[1])
plot(hsi.refl[2])
plot(subset(hsi.refl, 1))
# Set the file name
f.name <- strsplit(hsi.files[i], "_")[[1]][9]
f.name
# write this to disc
writeRaster(hsi.refl,
filename = paste0("D:/Kamoske_Dissertation_Ch2/PCA_Noise/Rasters/TALL_", f.name, "_20190904.tif"),
options ="INTERLEAVE=BAND",
overwrite = TRUE)
# Load the library
library(hypRspec)
library(raster)
#--------------------------------------------------------------------------------------------------------------
# First day of flights
#--------------------------------------------------------------------------------------------------------------
# make a list of the files
hsi.files <- list.files("D:/NEON_Data/2018/D08/2018_TALL_4/L1/Spectrometer/ReflectanceH5/2018042716", full.names = TRUE)
# loop through the files
for (i in 1:length(hsi.files)) {
print(paste0("First day of flights: ", hsi.files[i], "."))
# Calculate the NDVI mask
ndvi <- ndvi.mask(hy.file = hsi.files[i],
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength",
red.nm = 674,
nir.nm = 830,
ndvi.threshold = 0.5)
# Calculate the brightness mask
brightness <- brightness.mask(hy.file = hsi.files[i],
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength")
# Apply the corrections and extract the reflectance data
hsi.refl <- hsi.clip(hy.file = hsi.files[i],
band.combo = c(25:194, 215:284, 325:403),
metadata.path = "/TALL/Reflectance/Reflectance_Data",
reflectance.path = "/TALL/Reflectance/Reflectance_Data",
wavelength.path = "/TALL/Reflectance/Metadata/Spectral_Data/Wavelength",
coordinate.path = "/TALL/Reflectance/Metadata/Coordinate_System",
shp.file.loc = "D:/Kamoske_Dissertation_Ch2/PCA_Noise/Shp_File",
shp.file.name = "TALL_PCA_BOX")
# Set the file name
f.name <- strsplit(hsi.files[i], "_")[[1]][9]
# write this to disc
writeRaster(hsi.refl,
filename = paste0("D:/Kamoske_Dissertation_Ch2/PCA_Noise/Rasters/TALL_", f.name, "_20190904.tif"),
options ="INTERLEAVE=BAND",
overwrite = TRUE)
}
library(devtools)
setwd("C:/Users/Aaron Kamoske/Dropbox/R_Packages_GitHub/hypRspec")
devtools::document()
